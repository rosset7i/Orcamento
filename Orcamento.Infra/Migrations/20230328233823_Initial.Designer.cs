// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Orcamento.Infra.AppDbContext;

#nullable disable

namespace Orcamento.Infra.Migrations
{
    [DbContext(typeof(OrcamentoDbContext))]
    [Migration("20230328233823_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.1.23111.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Orcamento.Domain.Entities.Fornecedor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Fornecedor");
                });

            modelBuilder.Entity("Orcamento.Domain.Entities.Orcamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Data")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FornecedorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("PrecoTotal")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("FornecedorId");

                    b.ToTable("Orcamento");
                });

            modelBuilder.Entity("Orcamento.Domain.Entities.Produto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("IdFornecedor")
                        .HasColumnType("uuid");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Preco")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("IdFornecedor");

                    b.ToTable("Produto");
                });

            modelBuilder.Entity("Orcamento.Domain.Entities.ProdutoOrcamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdOrcamento")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdProduto")
                        .HasColumnType("uuid");

                    b.Property<double>("Quantidade")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("IdOrcamento");

                    b.HasIndex("IdProduto");

                    b.ToTable("ProdutoOrcamento");
                });

            modelBuilder.Entity("Orcamento.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Orcamento.Domain.Entities.Orcamento", b =>
                {
                    b.HasOne("Orcamento.Domain.Entities.Fornecedor", "Fornecedor")
                        .WithMany("Orcamento")
                        .HasForeignKey("FornecedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fornecedor");
                });

            modelBuilder.Entity("Orcamento.Domain.Entities.Produto", b =>
                {
                    b.HasOne("Orcamento.Domain.Entities.Fornecedor", "Fornecedor")
                        .WithMany("Produto")
                        .HasForeignKey("IdFornecedor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fornecedor");
                });

            modelBuilder.Entity("Orcamento.Domain.Entities.ProdutoOrcamento", b =>
                {
                    b.HasOne("Orcamento.Domain.Entities.Orcamento", "Orcamento")
                        .WithMany("ProdutoOrcamento")
                        .HasForeignKey("IdOrcamento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Orcamento.Domain.Entities.Produto", "Produto")
                        .WithMany("ProdutoOrcamento")
                        .HasForeignKey("IdProduto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Orcamento");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("Orcamento.Domain.Entities.Fornecedor", b =>
                {
                    b.Navigation("Orcamento");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("Orcamento.Domain.Entities.Orcamento", b =>
                {
                    b.Navigation("ProdutoOrcamento");
                });

            modelBuilder.Entity("Orcamento.Domain.Entities.Produto", b =>
                {
                    b.Navigation("ProdutoOrcamento");
                });
#pragma warning restore 612, 618
        }
    }
}
